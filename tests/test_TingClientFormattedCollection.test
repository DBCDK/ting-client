<?php
/**
 * Author: Martin MÃ¸ller
 */
class TestTingClientFormattedCollection extends DrupalUnitTestCase {

  private $fullViewResponse;
  private $shortViewResponse;

  /**
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'TestTingClientFormattedCollection',
      'description' => 'Tests the TingClientFormattedCollection object',
      'group' => 'Ting Client',
    );
  }

  public function setUp() {
    $path = drupal_get_path('module', 'ting_client');
    require_once($path . '/lib/result/object/TingClientFormattedCollection.php');

    $this->fullViewResponse = json_decode(file_get_contents($path . '/tests/mockups/processResponse_response_dump_full_view_search.json'));
    $this->shortViewResponse = json_decode(file_get_contents($path . '/tests/mockups/processResponse_response_dump_short_view_search.json'));

    parent::setUp();
  }

  public function testEmptyFormattedCollection() {
    $formattedCollection = new TingClientFormattedCollection(NULL);

    $this->assertNull($formattedCollection->getBriefDisplay(), 'briefDisplay is NULL as expected');
    $this->assertNull($formattedCollection->getWorkDisplay(), 'workDisplay is NULL as expected');
    $this->assertNull($formattedCollection->getWorkOne(), 'workOne is NULL as expected');
  }

  public function testFullViewFormattedCollection() {
    $formattedCollection = new TingClientFormattedCollection($this->fullViewResponse->searchResponse->result->searchResult[0]->formattedCollection);

    $this->assertNotNull($formattedCollection->getBriefDisplay(), 'briefDisplay is not NULL - as expected');
    $this->assertTrue(is_object($formattedCollection->getBriefDisplay()), 'briefDisplay is of type Object');

    $this->assertNotNull($formattedCollection->getWorkDisplay(), 'workDisplay is not NULL - as expected');
    $this->assertTrue(is_object($formattedCollection->getWorkDisplay()), 'workDisplay is of type Object');

    $this->assertNotNull($formattedCollection->getWorkOne(), 'workOne is not NULL - as expected');
    $this->assertTrue(is_object($formattedCollection->getWorkOne()), 'workDisplay is of type Object');
  }

  public function testShortViewFormattedCollection() {
    $formattedCollection = new TingClientFormattedCollection($this->shortViewResponse->searchResponse->result->searchResult[0]->formattedCollection);

    $this->assertNotNull($formattedCollection->getBriefDisplay(), 'briefDisplay is not NULL - as expected');
    $this->assertTrue(is_object($formattedCollection->getBriefDisplay()), 'briefDisplay is of type Object');

    $this->assertNull($formattedCollection->getWorkDisplay(), 'workDisplay is NULL as expected');

    $this->assertNull($formattedCollection->getWorkOne(), 'workOne is NULL as expected');
  }

  public function testAddRelationsToElement() {
    // Relations are added if they exist
    $element = new stdClass();
    $tingClientObject = new stdClass();
    $tingClientObject->relationsData = 'relationData';
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();

    $result = $tingClientFormattedCollection->addRelationsToElementTest($element, array($tingClientObject));

    $expected_relations = 'relationData';
    $this->assertEqual($result->relationsData, $expected_relations, 'Relations are set');

    // No Relations are added if they do not exist
    $element = new stdClass();
    $tingClientObjectNoRelationData = new stdClass();
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();

    $result = $tingClientFormattedCollection->addRelationsToElementTest($element, array($tingClientObjectNoRelationData));

    $this->assertFalse(isset($result->relationsData), 'Relations are not set');
  }

  public function testsetWorkOne() {

    // Test work one not set
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();
    $workdisplay = new stdClass();
    $tingClientFormattedCollection->setWorkOneTest($workdisplay);

    $this->assertFalse($tingClientFormattedCollection->getWorkOne(), 'Work one not set');

    // Test work one with single manifestation
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();
    $workdisplay->manifestation = new stdClass();
    $tingClientFormattedCollection->setWorkOneTest($workdisplay);

    $this->assertEqual($tingClientFormattedCollection->getWorkOne(), $workdisplay->manifestation, 'Work one is set');

    // Test work one where manifestation is null
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();
    $workdisplay->manifestation = null;
    $tingClientFormattedCollection->setWorkOneTest($workdisplay);

    $this->assertEqual($tingClientFormattedCollection->getWorkOne(), $workdisplay->manifestation, 'Manifestation is null and Work one not set');

    // Test work one with array of manifestations
    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();
    $workdisplay->manifestation = array(new stdClass());
    $tingClientFormattedCollection->setWorkOneTest($workdisplay);

    $expected_result = new stdClass();

    $this->assertEqual($tingClientFormattedCollection->getWorkOne(), $expected_result, 'Manifestation is null and Work one not set');

    // Test work one with relationData
    $tingClientObject = new stdClass();
    $tingClientObject->relationsData = 'relationData';

    $tingClientFormattedCollection = new TingClientFormattedCollectionTestClass();
    $tingClientFormattedCollection->setObjectCollection(array($tingClientObject));
    $workdisplay->manifestation = array(new stdClass());
    $tingClientFormattedCollection->setWorkOneTest($workdisplay);

    $this->assertEqual($tingClientFormattedCollection->getWorkOne()->relationsData, 'relationData', 'Manifestation is null and Work one not set');

  }

}


class TingClientFormattedCollectionTestClass extends TingClientFormattedCollection {

  public function __construct(){

  }

  public function setObjectCollection($objectCollection) {
    $this->objectCollection = $objectCollection;
  }

  public function setWorkOneTest($workDisplay) {
    $this->setWorkOne($workDisplay);
  }


  public function addRelationsToElementTest($element, $collection){
    return $this->addRelationsToElement($element, $collection);
  }

}

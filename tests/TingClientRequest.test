<?php

module_load_include('php', 'ting-client', '/lib/request/TingClientRequest');

abstract class TingClientRequestTester extends TingClientRequest {
  public static function getBadgerFishValueExposed($badgerFishObject, $valueName) {
    return self::getBadgerFishValue($badgerFishObject, $valueName);
  }

  public static function getAttributeValueExposed($object, $attributeName) {
    return self::getAttributeValue($object, $attributeName);
  }

  public static function getAttributeExposed($object, $attributeName) {
    return self::getAttribute($object, $attributeName);
  }
}

class TingClientRequestTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TestTingClientRequest',
      'description' => 'Tests the abstract class TingClientRequest',
      'group' => 'Ting Client',
    );
  }

  public function test_getBadgerFishValue() {
    $empty = new stdClass();
    $missing = TingClientRequestTester::getBadgerFishValueExposed($empty, '');
    $this->assertTrue(is_null($missing), 'Empty object returns NULL');

    $obj = new stdClass();
    $obj->arr = array();
    $arr = TingClientRequestTester::getBadgerFishValueExposed($obj, 'arr');
    $this->assertTrue(is_array($arr), '\'arr\' property is an array.');
    $this->assertTrue(empty($arr), '\'arr\' property is empty.');

    $objstr = new stdClass();
    $objstr->str8 = '&lt;html&gt;';
    $str8 = TingClientRequestTester::getBadgerFishValueExposed($objstr, 'str8');
    $this->assertTrue(is_string($str8), '\'str8\' property is a string.');
    $this->assertEqual($str8, '<html>');
  }

  public function test_getValue() {
    $dollar = new stdClass();
    $dollar->{'$'} = 'I buy that for a dollar.';
    $value = TingClientRequestTester::getValue($dollar);
    $this->assertEqual($value, 'I buy that for a dollar.');

    $array_empty = array();
    $empty = TingClientRequestTester::getValue($array_empty);
    $this->assertTrue(is_array($empty), '\'empty\' is an array.');
    $this->assertTrue(empty($empty), '\'empty\' is empty.');

    $obj1 = new stdClass();
    $obj2 = new stdClass();
    $obj1->{'$'} = 'obj1';
    $obj2->{'$'} = 'obj2';
    $array = array($obj1, $obj2);
    $list = TingClientRequestTester::getValue($array);
    $this->assertTrue(is_array($list), '\'list\' is an array.');
    $this->assertEqual($list, array('obj1', 'obj2'), '\'list\' has to elements.');
  }

  public function test_getAttribute() {
    $obj = new stdClass();
    $obj->{'@attr'} = 'attribute';
    $value1 = TingClientRequestTester::getAttributeExposed($obj, 'attr');
    $this->assertEqual($value1, 'attribute', 'Got attribute without @.');

    $value2 = TingClientRequestTester::getAttributeExposed($obj, '@attr');
    $this->assertEqual($value2, 'attribute', 'Got attribute with @.');
  }
}

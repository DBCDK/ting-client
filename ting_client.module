<?php

/**
 * @file
 * Ting Client module for Drupal
 *
 * This is a module and not a library due to the dependency on the NanoSOAP
 * module.
 *
 * All code are found in the lib/ directory and subdirectories. Inclusion of
 * code (classes) is done by ting_client.info.
 */
require_once('ting_client_class.inc');
define('TING_DEFAULT_CACHE_LIFETIME', 0);

function ting_client_validate_xsd($classname, $action) {

  $client = new ting_client_class();
  $xsd_url = FALSE;
  foreach ( $client->getUrls() as $service ) {
    if ( !empty($service['class']) && $service['class'] == $classname ) {
      $xsd_url = $service['xsd_url'];
    }
  }
  if ( !$xsd_url ) {
    throw new Exception( 'ting-client: Webservice XSD is not defined for ' . $classname);
    return array();
  }
  $parts = parse_url(variable_get($xsd_url));
  $xsd_file_name = file_default_scheme() . '://ting/ting-client/xsd/' . basename($parts['path']);

  $schema = new xml_schema();
  $schema->get_from_file($xsd_file_name);

  $seq = $schema->get_sequence($action);
  $arr[] = 'action';
  foreach ($seq as $element) {
    $s = $schema->get_element_attributes($element);
    $arr[] = $s['name'];
  }

  return $arr;
}

/**
 * Implements hook_permission().
 */
function ting_openformat_permission() {
  return array(
    'administer webservices settings' => array(
      'title' => t('Administer webservices settings'),
    ),
  );
}

/* Implements hook_menu */

function ting_client_menu() {
  $items['admin/config/serviceclient'] = array(
    'title' => 'Webservice client settings',
    'description' => 'Manage webservices.',
    'position' => 'right',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/serviceclient/settings'] = array(
    'title' => 'Urls and settings',
    'description' => 'Manage webservice settings.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_client_admin_webservices_settings'),
    'access arguments' => array('administer webservices settings'),
//'access arguments' => TRUE,
    'file' => 'ting_client.admin.inc'
  );

  $items['admin/config/serviceclient/cache_settings'] = array(
    'title' => 'Cache settings',
    'description' => 'Configure cache settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_client_cache_admin_form'),
    'access arguments' => array('administer webservices settings'),
//'access arguments' => TRUE,
    // 'type' => MENU_LOCAL_ACTION,
    'file' => 'ting_client.admin.inc',
  );
  return $items;
}


/**
 * support for ting_client_class
 * set urls for request factory
 * */
function ting_client_set_request_factory($url_variables) {
  // has other modules any webservices
  $more = module_invoke_all('ting_client_webservice');
  if (!empty($more)) {
    $url_variables = array_merge($url_variables, $more);
  }

  // get the real url (variable_get)
  foreach ( $url_variables as $name=>$settings ) {
    if ( !($url = ( isset($settings['url']) ) ? $settings['url'] : NULL) ) {
      throw new Exception( 'ting-client: Webservice URL is not defined for ' . $name);
    }
    // if ( !($class = ( isset($settings['class']) ) ? $settings['class'] : NULL) ) {
    //  throw new Exception( 'ting-client: Webservice class is not defined for ' . $name);
    // }
    $webservice_check[$name]['url'] = $url;
    $webservice_check[$name]['xsd_url'] = ( isset($url_variables[$name]['xsd_url']) ) ? $url_variables[$name]['xsd_url'] : NULL;
    $url_variables[$name]['url'] = variable_get($url);
  }

  ting_client_webservice_check($webservice_check);

  return $url_variables;
}


/**
 * support for ting_client_class
 * check if webservice URL, or XSD,  has changed, and update XSD if yes.
 * */
function ting_client_webservice_check($check_data) {

  // get stored values
  $webservice_check = variable_get('webservice_check', array());

  foreach ( $check_data as $name=>$settings ) {
    $webservice_check_url = ( !empty($webservice_check[$name]['url']) ) ? $webservice_check[$name]['url'] : NULL;
    $webservice_check_xsd = ( !empty($webservice_check[$name]['xsd_url']) ) ? $webservice_check[$name]['xsd_url'] : NULL;
    $webservice_check_file = NULL;
    if ( !empty($settings['xsd_url']) ) {
      $parts = parse_url(variable_get($settings['xsd_url']));
      $xsd_file_name = file_default_scheme() . '://ting/ting-client/xsd/' . basename($parts['path']);
      $webservice_check_file = is_file($xsd_file_name);
    }
    if (
        !isset($webservice_check[$name])
        || variable_get($settings['url']) != $webservice_check_url
        || variable_get($settings['xsd_url']) != $webservice_check_xsd
        || ( $settings['xsd_url'] && !$webservice_check_xsd )
        || !$webservice_check_file
      ) {

      $webservice_check[$name]['url'] = variable_get($settings['url']);
      if ( !empty($settings['xsd_url']) && $xsd_url = variable_get($settings['xsd_url'])) {

        // update XSD if webservice has changed URL.
        $result = drupal_http_request($xsd_url);

        // Bail if the HTTP request failed
        if ( !empty($result->error) ) {
          throw new Exception( "ting-client: HTTP request failed for $xsd_url. Error: $result->error");
        }

        // Get the folder for the final location of this preset...
        $directory = dirname($xsd_file_name);

        // Build the destination folder tree if it doesn't already exist.
        if ( !file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS) ) {
          throw new Exception('ting-client: Failed to create directory: ' . $directory);
        }
        file_save_data($result->data, $xsd_file_name, FILE_EXISTS_REPLACE);
        $webservice_check[$name]['xsd_url'] = variable_get($settings['xsd_url']);
      }
    }
  }
  variable_set('webservice_check', $webservice_check);
}


/**
 * support for ting_client_class
 * get method for caching
 * use drupal::cache_get
 * */
function ting_client_cache_get($cache_key, $storage = NULL) {
  $cache = cache_get($cache_key, $storage);
  // handle cache timeout
  if ($cache && $cache->expire > 0 && $cache->expire > REQUEST_TIME) {
    return $cache;
  }
  return FALSE;
}


/**
 * support for ting_client_class
 * set method for caching
 * use drupal::cache_set
 * */
function ting_client_cache_set($cache_key, $data, $storage = NULL, $expire = NULL) {
  cache_set($cache_key, $data, $storage, $expire);
}


/**
 * support for ting_client_class
 * add a drupal message and write to watchdog
 * */
function ting_client_set_message($message = '', $type = 'status', $repeat = NULL, $watchdog = array()) {
  if (!empty($message)) {
    drupal_set_message($message, $type, $repeat);
  }
  if (!empty($watchdog)) {
    watchdog($watchdog['type'], $watchdog['message'], array(), WATCHDOG_ERROR, $watchdog['link']);
  }
  else if ($type == 'error') {
    watchdog('ting_client', $message, array(), WATCHDOG_ERROR, NULL);
  }

}


/**
 * support for ting_client_class
 * enable/disable caching
 * */
function ting_client_enable_cache() {
  return variable_get('search_client_enable_cache', FALSE);
}


/**
 * support for ting_client_class
 * enable/disable logging
 * */
function ting_client_enable_logging() {
  return variable_get('ting_enable_logging', FALSE);
}


/**
 * support for ting_client_class
 * start/stop drupal timer
 * */
function ting_client_timer($action, $name) {
  $function = 'timer_' . $action;
  call_user_func_array($function, array($name));
}


/**
 * Implements hook_ding_install_tasks().
 */
function ting_client_ding_install_tasks() {
  module_load_include('inc', 'ting_client', 'ting_client.admin');
  return array(
    'ting_client_admin_webservices_settings' => array(
      'display_name' => st('Service settings'),
      'type' => 'form',
      'file' => drupal_get_path('module', 'ting_client') . '/ting_client.admin.inc',
    ),
  );
}
